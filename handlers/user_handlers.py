from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from keyboards.keyboards import yaded_kb
from lexicon.lexicon_ru import LEXICON_RU
from services.services import start_record
import sqlite3
import random

router = Router()
bot = Bot
conn = sqlite3.connect('data/santas.db')
cursor = conn.cursor()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    start_record()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
        await message.reply(
            f"–ü—Ä–∏–≤–µ—Ç, {username}! \n \n–ó–∞ –æ–∫–Ω–æ–º –∏–¥—ë—Ç —Å–Ω–µ–≥, –∞ —É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç–æ–∫? –ó–Ω–∞—á–∏—Ç —Å–∫–æ—Ä–æ –Ω–æ–≤—ã–π –≥–æ–¥... \n \n–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º –¥–µ–¥–æ–º \n–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫üßö‚Äç‚ôÄÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ –¥–æ 1000 —Ä—É–±–ª–µ–π.  \n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å - –Ω–∞–ø–∏—à–∏ '–•–æ—á—É —Å—é—Ä–ø—Ä–∏–∑' \n–≠–¢–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!", 
            reply_markup=yaded_kb
        )
    else:
        await message.reply("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫.", reply_markup=yaded_kb)



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU['/help'])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–°—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º –¥–µ–¥–æ–º"
@router.message(lambda message: message.text != LEXICON_RU['gifts'] and message.text != LEXICON_RU['yaded'])
async def save_gift(message: Message):
    user_id = message.from_user.id
    gift = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
    cursor.execute("UPDATE users SET gift = ? WHERE user_id = ?", (gift, user_id))
    conn.commit()
    await message.reply("–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º –¥–µ–¥–æ–º' –∏ —Å—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º –¥–µ–¥–æ–º")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–±—Ä–∞–ª–æ—Å—å –ª–∏ 13 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    cursor.execute("SELECT COUNT(*) FROM users WHERE gift IS NOT NULL")
    user_count = cursor.fetchone()[0]

    if user_count == 13:
        await distribute_santas()

@router.message(F.text.in_([LEXICON_RU['yaded']]))
async def become_santa(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–±—Ä–∞–ª–æ—Å—å –ª–∏ 13 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    cursor.execute("SELECT COUNT(*) FROM users WHERE gift IS NOT NULL")
    user_count = cursor.fetchone()[0]

    if user_count < 13:
        await message.reply(f"–ü–æ –∞–π–ø–∏ —Ç–µ–±—è –≤—ã—á–∏—Å–ª–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏, —Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ {user_count} —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å, —Å–∫–æ—Ä–æ –≤—ã–±–µ—Ä–µ–º –∫–æ–º—É –ø–æ–¥–∞—Ä–∏—à—å üéÅ. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—Ä–∏—Ç
        cursor.execute("SELECT santa_for FROM users WHERE user_id = ?", (user_id,))
        santa_for_id = cursor.fetchone()[0]

        if santa_for_id:
            cursor.execute("SELECT username, gift FROM users WHERE user_id = ?", (santa_for_id,))
            recipient_username, recipient_gift = cursor.fetchone()
            await message.answer(f"–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ @{recipient_username}. –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç: {recipient_gift}")
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text.in_([LEXICON_RU['gifts']]))
async def check_gifts(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫
    cursor.execute("SELECT gift FROM users WHERE user_id = ?", (user_id,))
    my_gift = cursor.fetchone()

    if not my_gift or not my_gift[0]:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å.")
        return

    my_gift = my_gift[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    cursor.execute("SELECT santa_for FROM users WHERE user_id = ?", (user_id,))
    santa_for_id = cursor.fetchone()[0]

    if not santa_for_id:
        await message.answer(f"–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫: {my_gift}\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ–∂–∏–¥–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    else:
        cursor.execute("SELECT username, gift FROM users WHERE user_id = ?", (santa_for_id,))
        recipient_username, recipient_gift = cursor.fetchone()
        await message.answer(
            f"–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫: {my_gift}\n–¢—ã –¥–∞—Ä–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ @{recipient_username}. –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç: {recipient_gift}"
        )

async def distribute_santas():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∏
    cursor.execute("SELECT user_id FROM users WHERE gift IS NOT NULL")
    user_ids = [row[0] for row in cursor.fetchall()]
    random.shuffle(user_ids)

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    for i in range(len(user_ids)):
        santa_id = user_ids[i]
        recipient_id = user_ids[(i + 1) % len(user_ids)]
        cursor.execute("UPDATE users SET santa_for = ? WHERE user_id = ?", (recipient_id, santa_id))

    conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for santa_id in user_ids:
        cursor.execute("SELECT gift, username FROM users WHERE user_id = (SELECT santa_for FROM users WHERE user_id = ?)", (santa_id,))
        gift, recipient_username = cursor.fetchone()
        await bot.send_message(santa_id, f"–¢—ã —Å—Ç–∞–ª —Ç–∞–π–Ω—ã–º –¥–µ–¥–æ–º –¥–ª—è @{recipient_username}! –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç: {gift}")


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ –±—Ä–æ—Å–∏—Ç—å —Å–Ω–µ–∂–æ–∫?"
# @router.message(F.text.in_([LEXICON_RU['how_snowball']]))
# async def how_snowball(message: Message):
#     await message.answer(text=LEXICON_RU['snow'])

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ë—Ä–æ—Å–∏—Ç—å —Å–Ω–µ–∂–æ–∫"
# @router.message(lambda message: message.text.lower().startswith("–±—Ä–æ—Å–∏—Ç—å —Å–Ω–µ–∂–æ–∫ –≤"))
# async def throw_snowball(message: Message):
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–ª–∏ username —Ü–µ–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#     parts = message.text.split(maxsplit=3)
#     if len(parts) < 4:
#         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username —Ü–µ–ª–∏ –ø–æ—Å–ª–µ '–±—Ä–æ—Å–∏—Ç—å —Å–Ω–µ–∂–æ–∫ –≤'.")
#         return
    
#     target = parts[3]  # ID –∏–ª–∏ username —Ü–µ–ª–∏
#     user_id = message.from_user.id

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∏–ª–∏ username
#     cursor.execute("SELECT id, username FROM users WHERE id = ? OR username = ?", (target, target))
#     result = cursor.fetchone()
    
#     if result:
#         target_id, target_username = result
#         # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø–∞–¥–∞–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ—Å–∞–≤—à–∏—Ö
#         cursor.execute("UPDATE users SET snowball_hits = snowball_hits + 1 WHERE id = ?", (target_id,))
#         cursor.execute("SELECT throwers FROM users WHERE id = ?", (target_id,))
#         throwers = cursor.fetchone()[0] or ""
#         throwers = f"{throwers}, {message.from_user.username}" if throwers else message.from_user.username
#         cursor.execute("UPDATE users SET throwers = ? WHERE id = ?", (throwers, target_id))
#         conn.commit()
#         await message.reply(f"–°–Ω–µ–∂–æ–∫ –±—Ä–æ—à–µ–Ω –≤ @{target_username}, {message.from_user.full_name}!")
#     else:
#         await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username.")

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–í –º–µ–Ω—è –ø–æ–ø–∞–ª–∏"
# @router.message(F.text.in_([LEXICON_RU['hit']]))
# async def show_hits(message: Message):
#     user_id = message.from_user.id
#     cursor.execute("SELECT snowball_hits, throwers FROM users WHERE user_id = ?", (user_id,))
#     hits, throwers = cursor.fetchone()
#     throwers_list = throwers.split(", ") if throwers else []
#     throwers_text = "\n".join([f"@{thrower}" for thrower in throwers_list]) if throwers_list else "–Ω–∏–∫—Ç–æ –Ω–µ –±—Ä–æ—Å–∞–ª"
#     await message.answer(
#         f"{message.from_user.full_name}, –≤ –≤–∞—Å –ø–æ–ø–∞–ª–∏ {hits} —Ä–∞–∑(–∞).\n"
#         f"–ë—Ä–æ—Å–∞–ª–∏ —Å–Ω–µ–∂–∫–∏:\n{throwers_text}"
#     )